<template>
    <b-container>
        <loading :active.sync="IsLoading" :can-cancel="false"></loading>

        <b-container style="margin-top:25px; border-bottom:thin double #808080;">
            <h4 class="header1" style="text-align:left">Welcome</h4>

            <span class="headerMenu">
                <b-link to="/Dashboard">home</b-link>&nbsp/&nbsp<span>Assessment</span>
            </span>
        </b-container>
        <b-row style="height:30px;margin-top:10px" class="text-center">
             <b-col cols="3">
             </b-col>
            <b-col cols="2">
                <span style="font-weight:600;font-size:medium">
                    STEP {{stepsValue}} of {{stepsMax}}
                </span>
            </b-col>
            <b-col>
                <b-progress striped height="15px" show-value :value="stepsValue" variant="success" :max="stepsMax"></b-progress>
            </b-col>
        </b-row>
        <b-row>
            <b-col md="3" style="margin-top:15px;text-align:left">
                <NavBar :groupsCounts="groupsCounts" :currentGroup="selectedGroupIdx" @onSelectGroup="SelectGroup"></NavBar>
            </b-col>
            <b-col md="8" style=" margin-left:20px; margin-top:20px;text-align:left">


                <b-alert variant="danger"
                         dismissible
                         :show="(ErrorMsg !== null)&&(ErrorMsg.length >1)"
                         @dismissed="clearLoginError">
                    <h6 v-if="ErrorMsg">Answer Required</h6>
                </b-alert>
                <transition name="fade">
                    <b-form v-if="show" @submit.prevent="handleSubmit">
                        <div style=" text-align: left; max-width:600px"
                             v-for="(MainQuestion, index) in currentGroupQuestions">
                            <div style="min-height:180px;" class="quiz-question" v-if="(index==(currentIndex))">
                                
                                <p class="sans-serif-font question-text">Q {{MainQuestion.rowID}}&nbsp - &nbsp{{MainQuestion.text}}  </p>
                                <b-form @submit.prevent="handleSubmit">

                                    <div class="quiz-options" v-if="(MainQuestion.type=='single')">
                                        <b-form-group>
                                            <b-form-radio-group horizontal
                                                                :name="'grp'+MainQuestion.questionID+'V'"
                                                                v-model="MainQuestion.checkedNames[0]"
                                                                :options="MainQuestion.options"
                                                                @change="onRdioboxChange(MainQuestion, $event)">
                                            </b-form-radio-group>
                                        </b-form-group>
                                    </div>
                                    
                                    <div v-if="(MainQuestion.type=='multi')">
                                        <b-form-group v-if="(MainQuestion.rowID!=5) &&(MainQuestion.rowID!=12) "> 
                                            <div v-if="(ops.isUIVisible)" style="min-width:300px; display:inline-block;padding:5px;"
                                                 v-for="(ops, index) in MainQuestion.options">
                                                <b-checkbox v-model="ops.isSelected"
                                                            @change="onCheckboxChange(MainQuestion,ops.value)"
                                                            name="ops.value" v-if="(ops.isUIVisible)">
                                                    {{ops.text}}
                                                </b-checkbox>
                                            </div>

                                        </b-form-group>

                                        <b-form-group v-if="(MainQuestion.rowID==5)||(MainQuestion.rowID==12) ">
                                         
                                            <div v-for="(dset, index) in LinkedToQuestions">
                                                <span style=" padding:5px 13px; background-color:#e0e0e0; display:block">{{dset.text}} </span>

                                                <div v-if="(dset.value==ops.linkedValueCode)&&(ops.isUIVisible)" style="min-width:300px; display:inline-block;padding:5px;"
                                                     v-for="(ops, index) in MainQuestion.options">

                                                    <b-checkbox v-model="ops.isSelected"
                                                                @change="onCheckboxChange(MainQuestion,ops.value)"
                                                                name="ops.value" v-if="(ops.isUIVisible)">
                                                        {{ops.text}}
                                                    </b-checkbox>
                                                </div>
                                            </div>
                                        </b-form-group>
                                    </div>
                                </b-form>
                            </div>
                        </div>
                        <div style=" width:100%;    text-align: left; margin:40px 2px;">
                            <b-button style=" margin-right:30px;width:190px!important" type="submit" variant="primary">
                                <span>Save and Continue</span>
                            </b-button>
                            <b-button style="margin-right:30px;width:150px!important" @click="GoSaveExit" type="button" variant="primary">
                                <span>Save and Exit</span>
                            </b-button>
                            <b-button style="margin-left:20px;" @click="GoQuestionBack" variant="secondary">Previous</b-button>

                        </div>
                    </b-form>
                </transition>
            </b-col>
        </b-row>
    </b-container> 
</template>
<script>
    import GroupsNav from "../components/GroupsNav.vue";
    import { questionsService } from "../_services";
    import Vue from "vue";
    import Vuex from "vuex";
    import { mapState, mapActions } from "vuex";
    import moment from 'moment';
    import vue_multiselect from '../components/dropdowns.vue'
    import Loading from 'vue-loading-overlay';
    

    export default Vue.extend({
        components: {
            NavBar: GroupsNav, vue_multiselect, Loading 
        },
        data() {
            return { 
                testtext:'',
                currentIndex: -1,
                questions: [],
                QuestionsCount: 0, 
                currentGroupQuestions: [],
                groupsCounts: [],
                selectedGroupIdx: 1,
                currentGroupQuestionsCount: 0, 
                GroupsList: [],
                linkedQuestions: [],
                show: true,
                SessionID: '',
                CurrentQuestion: null,
                STOPAPP: false,
                ErrorMsg: '',
                stepsMax:6 ,
                asstStatus: {},
                isToContinue: false,
                IsToSkipQ: false,
                completedGroups: [],
                IsLoading: false,
                storagefilename: '',
                LinkedToQuestions: [] 
                
            };
        },
        computed: {
           
            stepsValue: function () {
                return this.selectedGroupIdx;
                //if (this.selectedGroupIdx > 0) {
                //    return this.selectedGroupIdx + 1;
                //}
               
            },
        },
        watch: {
            currentIndex: function (newValue, oldValue) {
               //// console.log(newValue, oldValue);
              //  console.log(this.currentGroupQuestions[this.currentIndex]);
            }
        },
        created() {
            
           
            this.SessionID = this.$route.params.sessionid;
            this.storagefilename = "completedGroups" + this.SessionID
             var _sessionid = this.SessionID;
             var _sessionInfo = localStorage.getItem(_sessionid);
            //if (_sessionInfo === null) {
            //    localStorage.setItem(_sessionid, JSON.stringify(_sessionInfo));
            //} else {
            //    Object.assign(this.sessionInfo, this.sessionInfo, _sessionInfo);
            //}
               
            questionsService.getSessionStatus(this.SessionID).then(response => {
                //console.log(response.data);
                Object.assign(this.asstStatus, this.asstStatus, response.data); 
                if (this.asstStatus['isCompleted'] == true) {
                    this.$router.push('/assessment/' + this.SessionID + '/submitted');
                    return;
                }
                if (this.asstStatus['workfllowStatus'] == 'continue') {
                    this.isToContinue = true;
                } 
            });
            //let loader = Vue.$loading.show({
            //    width: 114,
            //    height:114,
            //    loader: 'spinner',
            //    backgroundColor: 'rgba(228, 240, 213, 0.73)',
            //    color: '#b13977'
            //});
            this.IsLoading = true;
            questionsService.getQuestions(_sessionid).then(data => { 
                this.IsLoading = false;
                this.questions = data.questions
                this.GroupsList = data.questionGroups;
                this.linkedQuestions = data.linkedQuestions; 
                this.QuestionsCount = this.questions.length;
                this.groupsCounts = [];
                this.GroupsList.forEach(element => { 
                    this.groupsCounts.push(element.rowsCount);
                });
              

                var lcompletedGroups = JSON.parse(localStorage.getItem(this.storagefilename) || '[]');
                console.log(lcompletedGroups);
                var largest = Math.max.apply(Math, lcompletedGroups);
                if (largest > 0) {
                    this.SelectGroup(largest+1); 
                    return false;
                } else {
                    this.currentIndex = 0; 
                    this.SelectGroup(1);  
                } 
                let currentQ = this.currentGroupQuestions[this.currentIndex]; 
               
            }).catch(err => {
                this.IsLoading = false; 
                this.ErrorMsg = err.toString() + '. Please contact your system administrator'; 
                this.STOPAPP = true;
            });
        },
        methods: {
          
            onRdioboxChange(mquestion) {
                event.preventDefault; 
                mquestion.options.forEach(element => {
                    if (element.value != event.target.value) {
                        element.isSelected = false;
                    } else {
                        element.isSelected = true;
                    }
                }); 
                console.log(mquestion);
            },
            onCheckboxChange(mquestion, value) {
                
                let isChecked = event.target.checked;
                
                if (isChecked) {
                    if (value == 'NA') {
                        mquestion.options.forEach(element => {
                            if (element.value != 'NA') {
                                element.isSelected = false;
                            }
                        });
                    } else {
                        mquestion.options.forEach(element => {
                            if (element.value == 'NA') {
                                element.isSelected = false;
                            }
                            else if (element.value == value) {
                                element.isSelected = true;
                            }
                        });
                    }
                } else {
                    mquestion.options.forEach(element => { 
                        if (element.value == value) {
                            element.isSelected = false;
                        }
                    });
                }
                let selOptions = mquestion.options.filter(function (el) {
                    return el.isSelected == true;
                }); 
                mquestion.checkedNames = [];
                selOptions.forEach(element => { 
                        mquestion.checkedNames.push(element.value);  
                }); 
               
                if (value == 'NA') {
                    if (isChecked == true) { 
                        mquestion.checkedNames = ['NA']; 
                        }  
                }
                
                console.log(mquestion); 
            }, 
            onMultiSelectChanged(item, isAdded) {
               // console.log(item); 
                let currentquestion = this.currentGroupQuestions[this.currentIndex];
                
                if (isAdded) {
                    currentquestion.options.forEach(element => {
                        if (item.value == 'NA') {
                            if (element.value !== 'NA') {
                                element.isSelected = false;
                            } else {
                                element.isSelected = true;
                            }
                        }
                        else
                        {
                            if (element.value  == 'NA') {
                                element.isSelected = false;
                            } else {
                                if (item.value == element.value) {
                                    element.isSelected = true;
                                }
                            }
                        }
                    }); 
                    currentquestion.checkedNames.push(item.value); 
                }
                else
                {
                    currentquestion.isSelected = false;
                    var index = currentquestion.checkedNames.indexOf(item.value);
                    if (index != -1) {
                        currentquestion.checkedNames.splice(index, 1);
                    }

                    currentquestion.options.forEach(element => { 
                        if (item.value == element.value) {
                            element.isSelected = false;
                        }  
                    }); 
                } 
            },
          
            handleSubmit(evt) {
                evt.preventDefault
                this.ErrorMsg = '';
                let currentquestion = this.currentGroupQuestions[this.currentIndex];
                let isAnswered = false;
                if (currentquestion.required == true) { 
                    currentquestion.options.forEach(element => {
                        if (element.isSelected  ) {
                            isAnswered = true; 
                        }
                    }); 

                   
                }
                if (isAnswered == false) {
                        this.ErrorMsg = 'Answer Required';
                        return false;
                    }
                this.LinkedToQuestions = [];
                let CheckedAnswers = [];
                currentquestion.options.forEach(element => {
                    if (element.isSelected==true) { 
                        var index = CheckedAnswers.indexOf(element.value);
                        if (index == -1) { 
                            CheckedAnswers.push(element.value);
                        }
                        if (currentquestion.rowID == 4 || currentquestion.rowID == 11) {
                           
                            this.LinkedToQuestions.push({ text: element.text, value: element.value});
                        }
                        
                    }
                });
                
                let Answers = {
                    SessionID: this.SessionID,
                    QuestionID: currentquestion.questionID,
                    CheckedNames: CheckedAnswers,
                    RowID: currentquestion.rowID
                }
                console.log(Answers);
                
                this.SubmitAnswer(Answers); 
            },
            SubmitAnswer(params) {
                this.$store.commit("globalStore/setShowLoading", true, { root: true }); 
                questionsService.SubmitAnswer(params).then(
                    result => {
                        this.$store.commit("globalStore/setShowLoading", false, { root: true });
                        this.GoQuestionNext();
                    },
                    error => {
                        this.$store.commit("globalStore/setShowLoading", false, { root: true });
                       // console.log('SubmitAnswerFailure 11');
                    }
                )
            },
            CheckLinkedQuestion() {
                if ( this.currentIndex < this.groupsCounts[this.selectedGroupIdx - 1] - 1) {
                    let questionNext = this.currentGroupQuestions[this.currentIndex + 1];
                    let linked_ID = questionNext.linkedQuestionRef; 
                    
                    if ((linked_ID != null) && (linked_ID != undefined)) {
                        let parentQuestions = this.currentGroupQuestions.filter(function (el) {
                           return el.questionID == linked_ID;
                            // && el.sqft >= 500
                        });
                       
                        if (parentQuestions.length > 0) { 
                            questionNext.isUIVisible = false;
                            let parentQuestion = parentQuestions[0]; 
                            let pCheckedNames = parentQuestion.checkedNames;
                            
                            let lnkedOptions = questionNext.linkedQuestionOption;  
                            let nextOptions = questionNext.options;
                            let selOptions = nextOptions.filter(function (el) {
                                return el.isSelected == true; 
                            }); 
                            let cCheckedNames = questionNext.checkedNames; 
                            console.log(cCheckedNames); 
                           

                           
                            if (pCheckedNames) { 
                                this.IsToSkipQ = true;
                                switch (lnkedOptions) {
                                    case "ANY":
                                        if (pCheckedNames.length > 0) {
                                            questionNext.isUIVisible = true;
                                            this.IsToSkipQ = false;

                                                                                    selOptions.forEach(ops => { 
                                            if (pCheckedNames.indexOf(ops.linkedValueCode) === -1) { 
                                                    ops.isSelected = false;
                                                } else {
                                                    ops.isSelected = true;
                                                } 
                                        }); 
                                        console.log(selOptions); 
                                        nextOptions.forEach(ops => {
                                          //  console.log(ops.value); 
                                            if (pCheckedNames.indexOf(ops.linkedValueCode) === -1) {
                                                ops.isSelected = false;
                                            } else {
                                                if (cCheckedNames.indexOf(ops.value) === -1) 
                                                    ops.isSelected = false;
                                                 else 
                                                    ops.isSelected = true;
                                            }
                                        }); 

                                        let selOptions2 = nextOptions.filter(function (el) {
                                            return el.isSelected == true;
                                        }); 
                                      

                                           
                                            pCheckedNames.forEach(chkname => {
                                                nextOptions.forEach(ops => {
                                                    if (ops.linkedValueCode == chkname) {
                                                        ops.isUIVisible = true;
                                                    }
                                                    
                                                });
                                            });
                                        }
                                        break;
                                    case "YES":
                                        if (pCheckedNames.length > 0) {
                                            if (pCheckedNames[0] == "YES" || pCheckedNames == 'Yes' || pCheckedNames == 2) {
                                                this.IsToSkipQ = false;
                                                questionNext.isUIVisible = true;

                                            }  
                                        }
                                        break;
                                    case "NO":
                                        if (pCheckedNames.length > 0) {
                                            if (pCheckedNames[0] == "NO" || pCheckedNames[0] == "No" || pCheckedNames == 1) {
                                                this.IsToSkipQ = false;
                                                questionNext.isUIVisible = true;
                                               
                                            } 
                                        }
                                        break;
                                    default:
                                        this.IsToSkipQ = true;
                                        questionNext.isUIVisible = false;

                                }
                                
                            }
                            
                        }  
                          
                    }
                }

            },
          
            GoSaveExit(evt) {
                this.handleSubmit(evt);
                evt.preventDefault;
                this.$router.push('/dashboard'); 
            },
            AssessmentSubmitToScore(evt) {
                evt.preventDefault;
                this.$router.push({ name: 'assessment', params: { sessionid: this.SessionID, status: 'submit' } })
            },
            GoQuestionBack() {
                if (this.currentIndex == 0) {
                    return;
                }

                this.currentIndex--;
                let currentQ = this.currentGroupQuestions[this.currentIndex];
                 if (currentQ.rowID == 5 || currentQ.rowID == 12) {

                        let parentQ = this.currentGroupQuestions[this.currentIndex - 1]; 
                        let pCheckedNames = parentQ.checkedNames;
                        this.LinkedToQuestions = [];
                        let CheckedAnswers = [];
                        parentQ.options.forEach(element => {
                            if (element.isSelected == true) {
                                var index = CheckedAnswers.indexOf(element.value);
                                if (index == -1) {
                                    CheckedAnswers.push(element.value);
                                }
                                this.LinkedToQuestions.push({ text: element.text, value: element.value }); 
                            }
                        });


                }

                if (currentQ.isUIVisible == false) {
                    this.GoQuestionBack();
                    return
                }
                 
              
               
               
            } ,
            GoQuestionNext() { 
                this.IsToSkipQ = false; 
                if (this.currentIndex == (this.groupsCounts[this.selectedGroupIdx - 1] - 1)) {
                    if (this.selectedGroupIdx >= (this.groupsCounts.length)) {
                        this.$router.push('/assessment/' + this.SessionID + '/submit');
                        return;
                    }
                    this.completedGroups.push(this.selectedGroupIdx); 
                    let nextgroup = this.selectedGroupIdx + 1;
                    var lcompletedGroups = JSON.parse(localStorage.getItem(this.storagefilename) || '[]');
                    lcompletedGroups.push(nextgroup); 
                    localStorage.setItem(this.storagefilename, JSON.stringify(lcompletedGroups));  
                    this.SelectGroup(nextgroup); 
                    return;
                }
                 
                let selOptions = this.currentGroupQuestions[this.currentIndex + 1].options.filter(function (el) {
                   return el.isSelected == true; 
                });
                console.log(selOptions);
                this.CheckLinkedQuestion(); 
                if (this.IsToSkipQ == true) { 
                    this.currentIndex = this.currentIndex + 1;
                    this.GoQuestionNext();
                    return;
                } 
                this.currentIndex++;
                let currentQ = this.currentGroupQuestions[this.currentIndex];
              
                //console.log(currentQ.options);
                //if (currentQ.questionID == 'C4_1_D4_V1') {
                //    alert('hi');
                //    this.stacked = true;
                //}
            },
            SelectGroup(i) {
                if (i > this.groupsCounts.length) {
                    i = this.groupsCounts.length;
                }
                this.selectedGroupIdx = i;
                var filteredgroup = this.questions.filter(function (el) {
                    return el.categoryID == 'C' + i;
                });
                this.currentGroupQuestions = [];
                this.currentGroupQuestions = filteredgroup;
                this.currentGroupQuestionsCount = this.currentGroupQuestions.length;
                this.currentIndex = 0;//filteredgroup[0].rowID - 1;

                var parsed = Number.parseInt(this.groupsCounts[this.selectedGroupIdx - 1], 10);
                if (Number.isNaN(parsed)) {
                    return 0;
                }
                this.stepsMax = this.groupsCounts.length;
            },
            clearLoginError() {
                this.ErrorMsg="";
                // this.$store.dispatch('clearLoginError')
                this.$store.dispatch('alert/clear');
            },
        } 
    });
</script>
<style  >

    .fade-enter-active, .fade-leave-active {
        transition: opacity .5s;
    }

    .fade-enter, .fade-leave-to /* .fade-leave-active below version 2.1.8 */ {
        opacity: 0;
    }

    .slide-fade-enter-active {
        transition: all .3s ease;
    }

    .slide-fade-leave-active {
        transition: all .8s cubic-bezier(1.0, 0.5, 0.8, 1.0);
    }

    .slide-fade-enter, .slide-fade-leave-to
    /* .slide-fade-leave-active below version 2.1.8 */ {
        transform: translateX(10px);
        opacity: 0;
    }

    
</style>
